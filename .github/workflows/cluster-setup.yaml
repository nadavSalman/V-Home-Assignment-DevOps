# Second Workflow (e.g., `.github/workflows/use-artifacts.yml`)
name: 'Cluster Setup'

on:
  
  workflow_run:
    workflows: ["Terraform Plan/Apply"]
    types:
      - completed


env:
  ARM_CLIENT_ID: "${{ secrets.ARM_CLIENT_ID }}"
  ARM_CLIENT_SECRET: "${{ secrets.ARM_CLIENT_SECRET }}"
  ARM_SUBSCRIPTION_ID: "${{ secrets.ARM_SUBSCRIPTION_ID }}"
  ARM_TENANT_ID: "${{ secrets.ARM_TENANT_ID }}"
  yaml_file: "./Provision-Infrastructure/modules/DeploymentPrep/prep_deployment.yaml"

jobs:
  Nginx-Ingress-Controller:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
    
      - name: AKS get-credentials
        # working-directory: ./Provision-Infrastructure
        run: |
          ./K8sDeployment/scripts/aks-get-credentials.sh        

      - name: kubectl config current-context
        # working-directory: ./Provision-Infrastructure
        run: |
          kubectl config current-context
  

      - name: Helm Install/Upgrade Nginx ingress Controller
        # working-directory: ./Provision-Infrastructure
        run: |
          helm upgrade --install external \
          --repo https://kubernetes.github.io/ingress-nginx \
          ingress-nginx \
          --namespace ingress \
          --create-namespace \
          --version 4.8.0 \
          --values ./K8sDeployment/nginx-ingress-contorrler/values/ingress.yaml
    
  ACR-imagePullSecrets:
      runs-on: ubuntu-latest
      steps:
        - name: Checkout code
          uses: actions/checkout@v4
      
        - name: Create an image pull secret
          # working-directory: ./Provision-Infrastructure
          run: |
            ./K8sDeployment/scripts/aks-get-credentials.sh

            yaml_file="./Provision-Infrastructure/modules/DeploymentPrep/prep_deployment.yaml"

            # Extract values using yq
            ACR_NAME=$(yq eval '.AzureResources.ACR.name' "$yaml_file")

            # Check if the secret acr-secret exists in the default namespace
            if kubectl get secret acr-secret --namespace default >/dev/null 2>&1; then
                echo "Secret 'acr-secret' already exists in the 'default' namespace. Skipping secret creation."
            else
                echo "Secret 'acr-secret' does not exist. Creating secret."
                kubectl create secret docker-registry acr-secret \
                    --namespace default \
                    --docker-server=$ACR_NAME.azurecr.io \
                    --docker-username=$ARM_CLIENT_ID \
                    --docker-password=$ARM_CLIENT_SECRET
            fi


